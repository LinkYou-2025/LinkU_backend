name: linkyou

on:
  push:
    branches: [ "develop", "feat/#128-user-auth-method" ]
  pull_request:
    branches: [ "develop", "feat/#128-user-auth-method" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: make application.properties
        run: |
          mkdir -p src/main/resources
          echo "$APPLICATION" > src/main/resources/application.properties
        env:
          APPLICATION: ${{ secrets.APPLICATION }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t app .
          docker tag app ${{ secrets.DOCKER_REPO_NAME }}:latest
          docker push ${{ secrets.DOCKER_REPO_NAME }}:latest

      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "[STEP 1] SSL 인증서 추출 시도..."
            if openssl s_client -connect www.artinsight.co.kr:443 -showcerts </dev/null 2>/dev/null \
                | openssl x509 -outform PEM > /tmp/artinsight.crt; then
              echo "[INFO] 인증서 추출 성공"
            
              CACERTS_PATH=$(dirname $(dirname $(readlink -f $(which java))))/lib/security/cacerts
              echo "[INFO] JDK cacerts 경로: $CACERTS_PATH"
            
              if sudo keytool -importcert -noprompt \
                  -storepass changeit \
                  -keystore "$CACERTS_PATH" \
                  -alias artinsight \
                  -file /tmp/artinsight.crt; then
                echo "[INFO] 인증서 등록 성공"
              else
                echo "[WARN] 인증서 등록 실패 - 무시하고 진행"
              fi
            else
              echo "[WARN] 인증서 추출 실패 - 무시하고 진행"
            fi
            
            echo "[STEP 2] Docker 배포 시작..."
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_REPO_NAME }}:latest
            sudo docker stop linku || true
            sudo docker rm linku || true
            sudo docker run -d --name linku --log-driver=syslog -p 8080:8080 \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE= \
              ${{ secrets.DOCKER_REPO_NAME }}:latest
            sudo docker image prune -a -f

      - name: Check logs and fail if MariaDB driver missing
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # 컨테이너 시작 후 10초 대기 (애플리케이션 기동 대기)
            sleep 5
            LOG=$(sudo docker logs $(sudo docker ps -lq))
            echo "$LOG"
            echo "$LOG" | grep "Cannot load driver class: org.mariadb.jdbc.Driver" && exit 1 || true
