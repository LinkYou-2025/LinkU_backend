name: linkyou
on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO_NAME: ${{ secrets.DOCKER_REPO_NAME }}  # 환경변수 설정

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.properties
        run: |
          mkdir -p src/main/resources
          echo "$APPLICATION" > src/main/resources/application.properties
        env:
          APPLICATION: ${{ secrets.APPLICATION }}

      - name: Create assetlinks.json file
        run: |
          mkdir -p src/main/resources/static/.well-known
          echo "${{ secrets.ASSETLINKS_JSON }}" > src/main/resources/static/.well-known/assetlinks.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Extract SSL fullchain certificate
        continue-on-error: true
        run: |
          mkdir -p certs
          echo | openssl s_client -connect ${{ secrets.SERVER_DOMAIN }}:443 -showcerts 2>/dev/null \
            | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > certs/server.crt
          echo "Fullchain certificate extracted to certs/server.crt"

      - name: Prepare Docker build context (copy cert)
        run: |
          if [ -f certs/server.crt ]; then
            cp certs/server.crt ./
          else
            echo "Certificate not found, skipping copy."
          fi

      - name: Docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t app .
          docker tag app $DOCKER_REPO_NAME:latest
          docker push $DOCKER_REPO_NAME:latest

      - name: Deploy with Docker Compose and deploy.sh
        uses: appleboy/ssh-action@master
        env:
          DOCKER_REPO_NAME: ${{ secrets.DOCKER_REPO_NAME }}
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            export DOCKER_REPO_NAME=${DOCKER_REPO_NAME}
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker pull $DOCKER_REPO_NAME:latest
            cd /home/ubuntu
            sudo docker compose pull
            cd /home/ubuntu/linkyou
            sudo DOCKER_REPO_NAME=$DOCKER_REPO_NAME bash deploy.sh
            if [ $? -ne 0 ]; then
              echo "Deployment failed"
              exit 1
            fi
            sudo docker image prune -a -f

      - name: Check logs for MariaDB driver errors
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sleep 10
            LOG=$(sudo docker logs $(sudo docker ps -lq))
            echo "$LOG"
            echo "$LOG" | grep "Cannot load driver class: org.mariadb.jdbc.Driver" && exit 1 || true
